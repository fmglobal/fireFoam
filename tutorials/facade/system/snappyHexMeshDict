/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          snappyHexMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            false;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    refinementBox0 // 1st level covering the chamber
    {
        type searchableBox;
        min ( -1.36 -1.4  0.0);
        max (  0.00  1.4  1.8);
    }

    refinementBox1 // 1st level covering the facade
    {
        type searchableBox;
        min ( 0.0 -1.4  0.0 );
        max ( 2.0  1.4  4.6 );
    }

    refinementBox3 // the inner chamber
    {
       type searchableBox;
        min ( -1.40  -0.7 0.44);
        max (  0.35  0.7 1.8);
    }

    refinementBox4 // 2nd level covering the facade
    {
       type searchableBox;
        min (  0.35  -0.7 0.44);
        max (  1.50   0.7 4.00);
    }

    // the following three regions are of importance
    plumeRefineBox //ichamber room
    {
       type searchableBox;
        min ( -1.36  -0.52 0.44);
        max ( -0.5   0.52 1.8);
    }
    
    smokeReineBox //ichamber room
    {
       type searchableBox;
        min ( -0.52  -0.52 0.9);
        max (  0.40   0.52 1.8);
    }

    facadeRefineBox //ichamber room
    {
       type searchableBox;
        min (  0.38  -0.52 0.7);
        max (  1.00   0.52 3.5);
    }
    
    FWall0 //facade, above the opening 
    {
        type searchableBox;
        min (0.35 -0.91 1.36);
        max (0.35  0.91 1.805);
    }

    FWall1 //facade, above the opening 
    {
        type searchableBox;
        min (0.35 -0.91 1.805);
        max (0.35  0.91 4.095);
    }

    FWall2 //facade, below the opening 
    {
        type searchableBox;
        min (0.35 -0.91 0.00);
        max (0.35  0.91 0.45);
    }

    FWall3 //facade, left to the opening 
    {
        type searchableBox;
        min (0.35 -0.910 0.45);
        max (0.35 -0.45 1.36);
    }

    FWall4 //facade, right to the opening 
    {
        type searchableBox;
        min (0.35  0.45 0.45);
        max (0.35  0.910 1.36);
    }

    // chamber inner dimension (1.35 x 1.35 x 1.35) 
    RWall1 // chamber, top
    {
        type searchableBox;
        min (-1.4 -0.7 1.799);
        max ( 0.0  0.7 1.801);
    }

    RWall2 // chamber, bottom
    {
        type searchableBox;
        min (-1.4 -0.7 0.445);
        max ( 0.0  0.7 0.455);
    }

    RWall3 // chamber, front
    {
        type searchableBox;
        min (-1.4 -0.7 0.4501);
        max ( 0.0 -0.7 1.8001);
    }

    RWall4 // chamber, back
    {
        type searchableBox;
        min (-1.4  0.7 0.4501);
        max ( 0.0  0.7 1.8001);
    }

    RWall5 // chamber, left 
    {
        type searchableBox;
        min (-1.4  -0.7 0.4501);
        max (-1.34  0.7 1.8001);
    }

    BWall // burner (0.6 x 0.6)
    {
        type searchableBox;
        min (-1.40  -0.3 0.445); // min(-1.35, -0.3, 0.445)
        max (-0.75  0.3 0.455);
    }

    LRWall1 // left end of chamber-to-opening, left
    {
        type searchableBox;
        min (0.0 -0.7  0.45);
        max (0.0 -0.45 1.36);
    }
    
    LRWall2 // left end of chamber-to-opening, right
    {
        type searchableBox;
        min (0.0  0.45  0.45);
        max (0.0  0.7 1.36);
    }
    
    LRWall3 // left end of chamber-to-opening, above 
    {
        type searchableBox;
        min (0.0  -0.7 1.36);
        max (0.0   0.7 1.81);
    }
    
    EWall1 // front of chamber-to-opening
    {
        type searchableBox;
        min (0.0  -0.45 0.45);
        max (0.35 -0.45 1.36);
    
    }

    EWall2 // back of chamber-to-opening 
    {
        type searchableBox;
        min (0.0  0.45 0.45);
        max (0.35 0.45 1.36);
    }
    
    EWall3 // bottom of chamber-to-opening
    {
        type searchableBox;
        min (0.0  -0.45 0.45);
        max (0.35  0.45 0.45);
    }

    EWall4 // top of chamber-to-opening
    {
        type searchableBox;
        min (0.0  -0.45 1.36);
        max (0.35  0.45 1.36);
    }
    
    NWall1 // exterior of chamber, lower block
    {
        type searchableBox;
        min (-1.36 -0.91 -0.01);
        max (0.349  0.91 0.449);
    }
    NWall2 // exterior of chamber, front
    {
        type searchableBox;
        min (-1.36 -0.91 -0.01);
        max (0.349 -0.701 1.81);
    }
    NWall3 // exterior of chamber, back
    {
        type searchableBox;
        min (-1.36  0.701 -0.01);
        max ( 0.349 0.910  1.81);
    }

    NWall4 // exterior of chamber, top
    {
        type searchableBox;
        min (-1.36 -0.91 1.81);
        max ( 0.349 0.91 1.9);
    }
    
    NWall5 // above chamber-to-opening
    {
        type searchableBox;
        min ( 0.00 -0.91 1.81);
        max ( 0.349 0.91 4.095);
    } 
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // While refining maximum number of cells per processor. This is basically
    // the number of cells that fit on a processor. If you choose this too small
    // it will do just more refinement iterations to obtain a similar mesh.
    maxLocalCells 5000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 10000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 2;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.

    features
    (
        //{
        //    file "someLine.eMesh";
        //    level 2;
        //}
    );

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        refinementBox0
        {   
            mode inside;
            levels ((1E15 1)); //2nd number indicates levels of refinement
        }

        refinementBox1
        {
            mode inside;
            levels ((1E15 1)); //2nd number indicates levels of refinement, dx = 5 cm
        }
        
    }

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {

            // facade
            "(FWall.*)"
            {
                level (1 1);
            }
            
            // burner
            BWall
            {
                level (1 1);
            }

            // left end, chamber-to-opening
            "(LRWall.*)"
            {
                level (1 1);
            }

            // chamber-to-opening
            "(EWall.*)"
            {
                level (1 1);
            }

            // inner chamber
            "(RWall.*)"
            {
                level (1 1);
            }

            // chamber exterior
            "(NWall.*)"
            {
                level (1 1);
            }
    }

    // Resolve sharp angles on fridges
    resolveFeatureAngle 60;

    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (-0.5 0.2 0.6);

    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 4.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;
}



// Settings for the layer addition.
addLayersControls
{
    relativeSizes   true;
    finalLayerThickness 0.3;
    // Per final patch (so not geometry!) the layer information
    layers
    {
        //fridgeA_region0
        //{
        //    nSurfaceLayers 1;
        //}
        //fridgeB_region0
        //{
        //    nSurfaceLayers 1;
        //}
        //igloo_region0
        //{
        //    nSurfaceLayers 1;
        //}
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    //- Wanted thickness of final added cell layer. If multiple layers
    //  is the
    //  thickness of the layer furthest away from the wall.
    //  Relative to undistorted size of cell outside layer.
    finalLayerRatio 0.5; 

    //- Minimum thickness of cell layer. If for any reason layer
    //  cannot be above minThickness do not add layer.
    //  Relative to undistorted size of cell outside layer.
    minThickness 0.25;

    //- If points get not extruded do nGrow layers of connected faces that are
    //  also not grown. This helps convergence of the layer addition process
    //  close to features.
    nGrow 0;


    // Advanced settings

    //- When not to extrude surface. 0 is flat surface, 90 is when two faces
    //  make straight angle.
    featureAngle 60;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    // Number of smoothing iterations of surface normals 
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction  
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells 
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial 
    // distance is large 
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points; typically 90
    minMedianAxisAngle 130;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;

    // Overall max number of layer addition iterations; typically 50
    nLayerIter  50;

    //- Max number of iterations after which the controls in 'relaxed' subdictionary
    //  of 'meshQuality' are used; typically 20
    //nRelaxedIter 20;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    //- Maximum non-orthogonality allowed. Set to 180 to disable; typically 65
    maxNonOrtho 45;

    //- Max skewness allowed. Set to <0 to disable.
    maxBoundarySkewness 20;
    maxInternalSkewness 4;

    //- Max concaveness allowed. Is angle (in degrees) below which concavity
    //  is allowed. 0 is straight face, <0 would be convex face.
    //  Set to 180 to disable.
    maxConcave 80;

    //- Minimum projected area v.s. actual area. Set to -1 to disable.
    minFlatness 0.5;

    //- Minimum pyramid volume. Is absolute volume of cell pyramid.
    //  Set to very negative number (e.g. -1E30) to disable.; typically 1e-13
    minVol 1e-10;

    //- Minimum face area. Set to <0 to disable.; typically -1
    minArea 1e-7;

    //- Minimum quality of tetrahedral cells from cell decomposition; particle
    //  tracking requires a small positive number (e.g. 1e-15), otherwise a large
    //  negative number improves layer insertion
    minTetQuality 1e-30;

    //- Minimum face twist. Set to <-1 to disable. dot product of face normal
    //- and face centre triangles normal
    minTwist 0.05;

    //- minimum normalised cell determinant
    //- 1 = hex, <= 0 = folded or flattened illegal cell
    minDeterminant 0.1; //0.001;

    //- minFaceWeight (0 -> 0.5) 
    minFaceWeight 0.05;

    //- minVolRatio (0 -> 1)
    minVolRatio 0.01;

    //must be >0 for Fluent compatibility
    minTriangleTwist -1;


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Flags for optional output
// 0 : only write final meshes
// 1 : write intermediate meshes
// 2 : write volScalarField with cellLevel for postprocessing
// 4 : write current intersections as .obj files
debug 0;


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1E-6;


// ************************************************************************* //
