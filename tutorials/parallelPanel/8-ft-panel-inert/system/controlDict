/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

checkpointInterval 20.0;
traceInterval 100;

application     fireFoam;

startFrom       startTime;

startTime       0.0;

stopAt          endTime;

endTime         150.0;

deltaT          0.002;

writeControl    adjustableRunTime;

writeInterval   $checkpointInterval;

purgeWrite      0;

writeFormat     ascii;

writePrecision  12;

writeCompression yes;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxDi		10;

maxCo		3.0;

functions
{
    SamplingPlanes
    {
        type surfaces;

        libs  ("libsampling.so");
        enabled             true;
        writeControl        adjustableRunTime;
        writeInterval       $checkpointInterval;
        interpolationScheme cellPoint;
        surfaceFormat       vtk;

        formatOptions
        {
            vtk
            {
                format    binary;
            }
        }

        fields
        (
            T
            U
	        ft
	        CO2
        );

        surfaces
        (
            verticalPlaneX
            {
                type cuttingPlane;
                planeType pointAndNormal;
                pointAndNormalDict
                {
                    point       (0 0 0);
                    normal    (1 0 0);
                }
                interpolate     true;
            }

            verticalPlaneY
            {
                type cuttingPlane;
                planeType pointAndNormal;
                pointAndNormalDict
                {
                    point       (0 0 0);
                    normal    (0 1 0);
                }
                interpolate     true;
            }
        );
    }

    Isosurfaces
    {
        type surfaces;
        libs ("libsampling.so");
        enabled         true;
        writeControl   adjustableRunTime;
        writeInterval   $checkpointInterval;
        interpolationScheme cellPoint;
        surfaceFormat vtk;
        fields
        (
                T
        );
        surfaces
        (
                flame_st // Z_st
                {
                    type            isoSurfaceCell;
                    isoField        ft;
                    isoValue        0.064;
                    interpolate     true;
                    regularise      true;
                }
                smoke
                {
                    type            isoSurfaceCell;
                    isoField        CO2;
                    isoValue        0.01;
                    interpolate     true;
                    regularise      true;
                }
        );
    }

    PanelSurfaces
    {
        type surfaces;
        libs ("libsampling.so");
        enabled         true;
        writeControl   adjustableRunTime;
        writeInterval   $checkpointInterval;
        interpolationScheme cellPoint;
        surfaceFormat vtk;
        region      region0;
        fields
        (
            qr
            convectiveHeatFlux_T
            T
	        phi
        );
        surfaces
        (
            panelSurface
            {
                type            patch;
                patches         (
                                        region0_to_fuelRegion_fuel
                                );
            }
        );
    }

    PanelsMass
    {
        type            volFieldValue;
        libs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl    adjustableRunTime;
        writeInterval   $traceInterval;
        log             false;     
        writeFields     false;
        region		fuelRegion;
        operation       volIntegrate; 
        fields
        (
            rho
        );
    }

    GlobalHRR
    {
        type            volFieldValue;
        libs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl    adjustableRunTime;
        writeInterval   $traceInterval;
        log             false;     
        writeFields     false;
        regionType     	all;
	    name		c0;
        operation       volIntegrate; 
        fields
        (
            Qdot
        );
    }
    
    GlobalPyrolysateFlux
    {
        type            surfaceFieldValue;
        libs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl    timeStep;
        writeInterval   $traceInterval;
        log             false;     
        writeFields     false;
        regionType      patch;
	updateHeader    false;
        name            region0_to_fuelRegion_fuel;
        operation       sum;
        fields
        ( 
	        phi
        );
    }

    PanelsIntegrated
    {
        type            surfaceFieldValue;
        libs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl    timeStep;
        writeInterval   $traceInterval;
        log             false;     
        writeFields     false;
        regionType      patch;
	    updateHeader    false;
        name            region0_to_fuelRegion_fuel;
        operation       areaIntegrate;
        fields
        ( 
            qr
            qin
            qem
            QcWallFunction
	        convectiveHeatFlux_T
	        convectiveHeatFlux_L
	        phi
        );
    }

    RadgaugeIntegrated
    {
        type            surfaceFieldValue;
        libs ("fieldFunctionObjects");
        enabled         true;
        writeControl    timeStep;
        writeInterval   $traceInterval;
        log             false;     
        writeFields     false;
        regionType      patch;
        updateHeader    false;
	    name            Radgauge;
        operation       areaIntegrate;
        fields
        ( 
    	    T
	        qr
            qin
            qem
	        convectiveHeatFlux_T
        );
    }

    VolumeSetSampling
    {
        type    sets;
        libs    (sampling);
        log     on;
        enabled true;
 
        writeControl    adjustableRunTime;
        writeInterval  $checkpointInterval;
        setFormat       csv;
        interpolationScheme cell;
        fields 
	(
	    ft
	    T
	    O2
	    C3H8
	    CO2
	    H2O
	);
        sets
        (
            centres
            {
                type    cellCentre;
               bounds  (-0.305 -0.153 0.305) (0.305 0.153 3.048);
            }
        );
    }
}

// ************************************************************************* //
